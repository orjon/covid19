{"version":3,"sources":["images/logo/covid19Tracker_LogoSML.png","actions/types.js","actions/alerts.js","utils/setAuthToken.js","actions/currentUser.js","Components/Nav/Logo.js","Components/Nav/NavItem.js","Components/Nav/NavBurgerMenu.js","Components/Nav/Nav.js","actions/countryList.js","Components/Home.js","Components/Login.js","Components/Register.js","Components/Country.js","Components/Countries.js","utils/helpers.js","Components/Charts/calculateChartData.js","Components/Charts/LineChart.js","Components/Charts/ModeButton.js","actions/stats.js","Components/Charts/Chart.js","Components/Main.js","Components/Alert.js","reducers/alerts.js","reducers/auth.js","reducers/currentUser.js","reducers/countryList.js","reducers/stats.js","reducers/rootReducer.js","store.js","App.js","index.js"],"names":["SET_ALERT","REMOVE_ALERT","REGISTER_SUCCESS","REGISTER_FAIL","AUTHORIZED","UNAUTHORIZED","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGIN_GUEST","LOGOUT","COUNTRIES_LOADED","COUNTRIES_FAILED","COUNTRIES_UPDATE","GUEST_COUNTRIES_UPDATE","STATS_DELETE","STATS_LOAD","MULTI_STATS_LOADED","STATS_FAILED","SCALE_CHANGE","MEASURE_CHANGE","DATA_CHANGE","setAlert","message","color","dispatch","id","uuid","type","payload","setTimeout","setAuthToken","token","axios","defaults","headers","common","loginGuest","a","loadUser","localStorage","console","log","get","res","data","payloadObject","logout","connect","className","onClick","to","activeClassName","src","LogoImage","alt","state","name","currentUser","link","text","exact","NavBurgerMenu","locations","useState","menuOpen","setMenuOpen","toggleBrugerMenu","currentState","navItems","map","location","auth","isHome","isAuthenticated","getCountries","length","countries","forEach","country","split","replace","trim","slug","replaceAll","error","countriesLoaded","countryList","loaded","history","useHistory","useEffect","push","isLoaded","login","password","config","body","JSON","stringify","post","errors","response","msg","username","formData","setFormData","fieldChange","e","target","value","onSubmit","preventDefault","onChange","placeholder","register","password2","toLowerCase","Country","selectedCountries","listFull","countryName","flagSource","flag","selected","includes","style","fontSize","updateUserCountries","sort","updateGuestCountries","guest","setSelectedCountries","guestArray","rand","Math","floor","random","toggleCountry","countrySlug","filter","countrySelectedList","undefined","countryCompleteList","_id","countryNameFromSlug","find","formatDate","date","dayjs","format","populationFromSlug","population","populationString","abbreviateNumber","newValue","suffixNum","shortValue","precision","parseFloat","pow","toPrecision","toFixed","per100k","dataArray","entry","cumulativeToDifference","cumulativeArray","differenceArray","i","difference","cumulativeErrorFix","originalArray","reversedArray","reverse","fixedArray","fields","randomColor","stats","chartModeData","chartModeMeasure","chartModeScale","setChartData","selectedData","labels","datasets","index","label","backgroundColor","fill","borderColor","borderWidth","pointRadius","calculateChartData","chartData","redraw","options","legend","onHover","cursor","display","position","boxWidth","scales","xAxes","ticks","minRotation","maxTicksLimit","maintainAspectRatio","setMeasure","setData","setScale","mode","isSelected","changeMode","chartTitle","chartFrom","chartTo","notAvailableList","from","notAvailable","list","toString","deleteCountryStats","getStats","userCountries","getCountryStats","Promise","all","responses","b","dataAvailable","countriesStats","loading","alerts","closeAlert","alert","initialState","action","setItem","removeItem","__v","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","App","path","component","Home","Main","Login","Register","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.0d8eda41.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/covid19Tracker_LogoSML.3a8d12c1.png\";","export const SET_ALERT = 'SET_ALERT';\nexport const REMOVE_ALERT = 'REMOVE_ALERT';\n\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\n\nexport const AUTHORIZED = 'AUTHORIZED';\nexport const UNAUTHORIZED = 'UNAUTHORIZED';\n\nexport const USER_LOADED = 'USER_LOADED';\nexport const AUTH_ERROR = 'AUTH_ERROR';\n\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\nexport const LOGIN_GUEST = 'LOGIN_GUEST';\n\nexport const LOGOUT = 'LOGOUT';\n\nexport const COUNTRIES_LOADED = 'COUNTRIES_LOADED';\nexport const COUNTRIES_FAILED = 'COUNTRIES_FAILED';\n\nexport const COUNTRIES_UPDATE = 'COUNTRIES_UPDATE';\nexport const GUEST_COUNTRIES_UPDATE = 'GUEST_COUNTRIES_UPDATE';\nexport const PROFILE_ERROR = 'PROFILE_ERROR';\n\nexport const STATS_DELETE = 'STATS_DELETE';\nexport const STATS_LOAD = 'STATS_LOADED';\nexport const MULTI_STATS_LOADED = 'MULTI_STATS_LOADED';\nexport const STATS_FAILED = 'STATS_FAILED';\n\nexport const SCALE_CHANGE = 'SCALE_CHANGE';\nexport const MEASURE_CHANGE = 'MEASURE_CHANGE';\nexport const DATA_CHANGE = 'DATA_CHANGE';\n","import { SET_ALERT, REMOVE_ALERT } from './types';\nimport { v4 as uuid } from 'uuid';\n\n// thunk allows the dispatch\nexport const setAlert = (message, color) => (dispatch) => {\n  const id = uuid();\n  dispatch({\n    type: SET_ALERT,\n    payload: { message, color, id },\n  });\n\n  setTimeout(() => dispatch({ type: REMOVE_ALERT, payload: id }), 5000);\n};\n\nexport const closeAlert = (id) => (dispatch) => {\n  dispatch({\n    type: REMOVE_ALERT,\n    payload: id,\n  });\n};\n","import axios from 'axios';\n\nconst setAuthToken = (token) => {\n  if (token) {\n    axios.defaults.headers.common['covidTrackerToken'] = token;\n  } else {\n    delete axios.defaults.headers.common['covidTrackerToken'];\n  }\n};\n\nexport default setAuthToken;\n","import axios from 'axios';\nimport { setAlert } from './alerts';\nimport setAuthToken from '../utils/setAuthToken';\nimport {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_GUEST,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGOUT,\n  COUNTRIES_UPDATE,\n  GUEST_COUNTRIES_UPDATE,\n  AUTHORIZED,\n  UNAUTHORIZED,\n} from './types';\n\nexport const loginGuest = () => async (dispatch) => {\n  dispatch({\n    type: LOGIN_GUEST,\n  });\n};\n\nexport const updateGuestCountries = (countries) => async (dispatch) => {\n  countries.sort();\n  dispatch({\n    type: GUEST_COUNTRIES_UPDATE,\n    payload: countries,\n  });\n};\n\n//Update user countries\nexport const updateUserCountries = (countries) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  countries.sort();\n\n  const body = JSON.stringify({ countries });\n\n  try {\n    const res = await axios.post('/covidapi/user/countries', body, config);\n    dispatch({\n      type: COUNTRIES_UPDATE,\n      payload: res.data,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n//Load user\nexport const loadUser = () => async (dispatch) => {\n  //Add token to headers\n  if (localStorage.token) {\n    console.log('Token is there!');\n    setAuthToken(localStorage.token);\n  } else return;\n  // make request\n  try {\n    const res = await axios.get('/covidapi/user');\n    // console.log(res.data);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data,\n    });\n    let payloadObject = { token: localStorage.token };\n    dispatch({\n      type: AUTHORIZED,\n      payload: payloadObject,\n    });\n  } catch (error) {\n    dispatch({\n      type: AUTH_ERROR,\n    });\n  }\n};\n\n// Register user\nexport const register = ({ name, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, password });\n\n  try {\n    const res = await axios.post('/covidapi/user', body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n    });\n    dispatch({\n      type: AUTHORIZED,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n    dispatch(setAlert('Registration successful!', 'success'));\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'warning')));\n    }\n\n    dispatch({\n      type: UNAUTHORIZED,\n    });\n    dispatch({\n      type: REGISTER_FAIL,\n    });\n  }\n};\n\n// Login user\nexport const login = ({ name, password }) => async (dispatch) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  };\n\n  const body = JSON.stringify({ name, password });\n\n  try {\n    const res = await axios.post('/covidapi/auth', body, config);\n    // dispatch({\n    //   type: LOGIN_SUCCESS,\n    // });\n    dispatch({\n      type: AUTHORIZED,\n      payload: res.data,\n    });\n    dispatch(loadUser());\n    dispatch(setAlert('Login success!', 'success'));\n  } catch (error) {\n    const errors = error.response.data.errors;\n\n    if (errors) {\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'warning')));\n    }\n\n    dispatch({\n      type: UNAUTHORIZED,\n    });\n    dispatch({\n      type: LOGIN_FAIL,\n    });\n  }\n};\n\n//Logout user\nexport const logout = () => (dispatch) => {\n  dispatch({\n    type: UNAUTHORIZED,\n  });\n  dispatch({\n    type: LOGOUT,\n  });\n  // dispatch(setAlert('User logged out!', 'success'));\n};\n","import React from 'react';\nimport LogoImage from '../../images/logo/covid19Tracker_LogoSML.png';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { logout } from '../../actions/currentUser';\nimport '../../styles/Logo.scss';\n\nconst Logo = ({ logout }) => {\n  return (\n    <div className='Logo'>\n      <NavLink onClick={logout} to='/' activeClassName='selected'>\n        <div className='flexRow center'>\n          <img\n            className='LogoImage'\n            src={LogoImage}\n            alt='Covid19 Tracker App logo'\n          />\n          <div className='LogoText'>Covid19 Tracker</div>\n        </div>\n      </NavLink>\n    </div>\n  );\n};\n\nexport default connect(null, { logout })(Logo);\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { logout } from '../../actions/currentUser';\n\nconst NavItem = ({ to, logout, name }) => {\n  let link = to;\n  let text = 'login/register';\n\n  if (link === 'logout') {\n    link = '';\n    text = `logout ${name}`;\n  }\n\n  return (\n    <NavLink\n      exact\n      onClick={logout}\n      to={`/${link}`}\n      className='navItem indent10'\n      activeClassName='selected'\n    >\n      <div className='gap5'>{text}</div>\n    </NavLink>\n  );\n};\n\nNavItem.propTypes = {\n  logout: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.currentUser.name,\n});\n\nexport default connect(mapStateToProps, { logout })(NavItem);\n","import React, { useState } from 'react';\nimport { default as IconNavBurger } from '@material-ui/icons/MenuRounded';\nimport { default as IconClose } from '@material-ui/icons/Close';\nimport NavItem from './NavItem';\n\nconst NavBurgerMenu = ({ locations }) => {\n  const [menuOpen, setMenuOpen] = useState(false);\n\n  const toggleBrugerMenu = () => {\n    setMenuOpen((currentState) => !currentState);\n  };\n\n  let navItems = locations.map((location) => (\n    <NavItem key={location} to={location} />\n  ));\n\n  return (\n    <div className='burgerMenu'>\n      {menuOpen ? (\n        <div className='navIcon gap10'>\n          <IconClose onClick={toggleBrugerMenu} />\n        </div>\n      ) : (\n        <div className='navIcon gap10'>\n          <IconNavBurger onClick={toggleBrugerMenu} />\n        </div>\n      )}\n      {menuOpen ? (\n        <div className='burgerMenuList gap20' onClick={toggleBrugerMenu}>\n          <div className='navIcon indent10'>\n            <IconClose />\n          </div>\n          <div className='navItem indent40'>{navItems}</div>\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default NavBurgerMenu;\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Logo from './Logo';\nimport NavItem from './NavItem';\nimport NavBurgerMenu from './NavBurgerMenu';\nimport '../../styles/Nav.scss';\n\nconst Nav = ({ isHome, auth: { isAuthenticated } }) => {\n  let guestLocations = ['login'];\n  let authLocations = ['logout'];\n\n  let locations = guestLocations;\n  if (isAuthenticated) {\n    locations = authLocations;\n  }\n\n  let navItems = locations.map((location) => (\n    <NavItem key={location} to={location} />\n  ));\n\n  return (\n    <nav className='Nav w100 indent10 gap10'>\n      <Logo />\n      {!isHome && (\n        <Fragment>\n          <div className='navItems'>{navItems}</div>\n          <div className='navBurger'>\n            <NavBurgerMenu locations={locations} />\n          </div>\n        </Fragment>\n      )}\n    </nav>\n  );\n};\n\nNav.propTypes = {\n  auth: PropTypes.object.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  auth: state.auth,\n});\n\nexport default connect(mapStateToProps, null)(Nav);\n","import axios from 'axios';\nimport { COUNTRIES_LOADED, COUNTRIES_FAILED } from './types';\n\n//get country list\nexport const getCountries = () => async (dispatch) => {\n  try {\n    const res = await axios.get('/covidapi/countries');\n    console.log('Got ' + res.data.length + ' countries.');\n    const countries = res.data;\n\n    countries.forEach((country) => {\n      country.country = country.country\n        .split('(')[0]\n        .split(',')[0]\n        .replace(' and ', ' & ')\n        .trim();\n      country.slug = country.slug.replaceAll('é', 'e');\n    });\n\n    countries.forEach((country) => {\n      if (country.country === 'ALA Aland Islands') {\n        country.country = 'Aland Islands';\n      } else if (country.slug === 'korea-north') {\n        country.country = 'North Korea';\n      }\n    });\n\n    dispatch({\n      type: COUNTRIES_LOADED,\n      payload: countries,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: COUNTRIES_FAILED,\n    });\n  }\n};\n","import React, { Fragment, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport Nav from './Nav/Nav';\nimport { getCountries } from '../actions/countryList';\nimport { loginGuest } from '../actions/currentUser';\nimport '../styles/Home.scss';\n\nconst Home = ({ countriesLoaded, getCountries, loginGuest }) => {\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!countriesLoaded) {\n      console.log('Getting countries');\n      getCountries();\n    }\n  }, [getCountries, countriesLoaded]);\n\n  return (\n    <Fragment>\n      <Nav isHome='true' />\n      <div className='pageWrapper'>\n        <div className='Home'>\n          <div className='buttons'>\n            <button\n              onClick={() => {\n                loginGuest();\n                history.push('/main');\n              }}\n              className='guest'\n            >\n              Guest\n            </button>\n            <button onClick={() => history.push('/login')} className='register'>\n              Login/Register\n            </button>\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  countriesLoaded: state.countryList.loaded,\n});\n\nexport default connect(mapStateToProps, { getCountries, loginGuest })(Home);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Nav from './Nav/Nav';\nimport { getCountries } from '../actions/countryList';\nimport { login, loginGuest } from '../actions/currentUser';\nimport { setAlert } from '../actions/alerts';\nimport '../styles/Login.scss';\n\nconst Login = ({\n  login,\n  isAuthenticated,\n  countriesLoaded,\n  getCountries,\n  setAlert,\n  isLoaded,\n  loginGuest,\n}) => {\n  const history = useHistory();\n  //Get country list if not loaded already\n  useEffect(() => {\n    if (!countriesLoaded) {\n      console.log('Getting countries');\n      getCountries();\n    }\n  }, [getCountries, countriesLoaded]);\n\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n  });\n\n  const { username, password } = formData;\n\n  const fieldChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    if (username === '' && password === '') {\n      setAlert('Please enter user name and password!', 'warning');\n    } else if (username === '') {\n      setAlert('Please enter user name!', 'warning');\n    } else if (password === '') {\n      setAlert('Please enter password!', 'warning');\n    } else {\n      login({ name: username, password });\n    }\n  };\n\n  // Redirect if logged in\n  if (isLoaded) {\n    return <Redirect to='/main' />;\n  }\n\n  return (\n    <Fragment>\n      <Nav isHome='true' />\n      <div className='pageWrapper'>\n        <div className='Login'>\n          <form onSubmit={(e) => onSubmit(e)}>\n            <div className='title'>\n              <h1>Login</h1>\n            </div>\n            <div className='field username'>\n              <input\n                id='username'\n                name='username'\n                value={username}\n                onChange={(e) => fieldChange(e)}\n                type='text'\n                placeholder='username'\n              />\n            </div>\n            <div className='field password'>\n              <input\n                id='password'\n                name='password'\n                value={password}\n                onChange={(e) => fieldChange(e)}\n                type='password'\n                placeholder='password'\n              />\n            </div>\n            <div className='buttonWrapper'>\n              <button type='submit' className='login'>\n                Login\n              </button>\n              <button\n                type='button'\n                onClick={() => history.push('/register')}\n                className='register faint'\n              >\n                Register\n              </button>\n              <button\n                type='button'\n                onClick={() => {\n                  loginGuest();\n                  history.push('/main');\n                }}\n                className='register faint'\n              >\n                Guest\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nLogin.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  login: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  isLoaded: state.currentUser.loaded,\n  isAuthenticated: state.auth.isAuthenticated,\n  countriesLoaded: state.countryList.loaded,\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  login,\n  getCountries,\n  loginGuest,\n})(Login);\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory, Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Nav from './Nav/Nav';\nimport { getCountries } from '../actions/countryList';\nimport { setAlert } from '../actions/alerts';\nimport { register, loginGuest } from '../actions/currentUser';\n\nimport '../styles/Login.scss';\n\nconst Register = ({\n  setAlert,\n  register,\n  isAuthenticated,\n  countriesLoaded,\n  getCountries,\n  loginGuest,\n}) => {\n  const history = useHistory();\n  //Get country list if not loaded already\n  useEffect(() => {\n    if (!countriesLoaded) {\n      console.log('Getting countries');\n      getCountries();\n    }\n  }, [getCountries, countriesLoaded]);\n\n  const [formData, setFormData] = useState({\n    username: '',\n    password: '',\n    password2: '',\n  });\n\n  const { username, password, password2 } = formData;\n\n  const fieldChange = (e) =>\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    //check passwords are the same\n    if (password !== password2) {\n      setAlert('Passwords do not match!', 'warning');\n    } else {\n      register({ name: username.toLowerCase(), password });\n    }\n  };\n\n  // Redirect if logged in\n  if (isAuthenticated) {\n    return <Redirect to='/main' />;\n  }\n\n  return (\n    <Fragment>\n      <Nav isHome='true' />\n      <div className='pageWrapper'>\n        <div className='Register'>\n          <form onSubmit={(e) => onSubmit(e)}>\n            <div className='title'>\n              <h1>Register new user</h1>\n            </div>\n            <div className='field username'>\n              <input\n                id='username'\n                name='username'\n                value={username}\n                onChange={(e) => fieldChange(e)}\n                type='text'\n                placeholder='user name'\n              />\n            </div>\n            <div className='field password'>\n              <input\n                id='password'\n                name='password'\n                value={password}\n                onChange={(e) => fieldChange(e)}\n                type='password'\n                placeholder='password'\n              />\n            </div>\n            <div className='field password2'>\n              <input\n                id='password2'\n                name='password2'\n                value={password2}\n                onChange={(e) => fieldChange(e)}\n                type='password'\n                placeholder='password confirmation'\n              />\n            </div>\n            <div className='buttonWrapper'>\n              <button type='submit' className='register'>\n                Register\n              </button>\n              <button\n                type='button'\n                onClick={() => history.push('/login')}\n                className='login faint'\n              >\n                Login\n              </button>\n              <button\n                type='button'\n                onClick={() => {\n                  loginGuest();\n                  history.push('/main');\n                }}\n                className='register faint'\n              >\n                Guest\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    </Fragment>\n  );\n};\n\nRegister.propTypes = {\n  setAlert: PropTypes.func.isRequired,\n  register: PropTypes.func.isRequired,\n  isAuthenticated: PropTypes.bool,\n};\n\nconst mapStateToProps = (state) => ({\n  isAuthenticated: state.auth.isAuthenticated,\n  countriesLoaded: state.countryList.loaded,\n});\n\n// connect needs any state and actions\nexport default connect(mapStateToProps, {\n  setAlert,\n  register,\n  getCountries,\n  loginGuest,\n})(Register);\n","import React, { Fragment } from 'react';\nimport { default as UncheckedBox } from '@material-ui/icons/CheckBoxOutlineBlank';\nimport { default as CheckedBox } from '@material-ui/icons/CheckBox';\n\nconst Country = ({ country, selectedCountries, listFull }) => {\n  let countryName = country.country;\n\n  let flagSource = country.flag;\n  let selected = false;\n\n  if (countryName === 'Netherlands Antilles') {\n    flagSource =\n      'https://www.orjon.com/covid19/images/flag/netherlands_antilles.svg';\n  }\n\n  if (selectedCountries.includes(country.slug)) {\n    selected = true;\n  }\n\n  return (\n    <Fragment>\n      {selected ? (\n        <div className='Country checked '>\n          <div className={`checkBox checked ${listFull}`}>\n            <CheckedBox style={{ fontSize: 18 }} />\n          </div>\n          <img\n            className='flag'\n            src={flagSource}\n            alt={`Flag of ${country.country}`}\n          />\n          <p className='countryName'>{countryName}</p>\n        </div>\n      ) : (\n        <div className={`Country ${listFull}`}>\n          <div className={`checkBox unchecked ${listFull}`}>\n            <UncheckedBox style={{ fontSize: 18 }} />\n          </div>\n          <img\n            className='flag'\n            src={flagSource}\n            alt={`Flag of ${country.country}`}\n          />\n          <p className='countryName'>{countryName}</p>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nexport default Country;\n","import React, { Fragment, useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { setAlert } from '../actions/alerts';\nimport { getCountries } from '../actions/countryList';\nimport {\n  updateUserCountries,\n  updateGuestCountries,\n} from '../actions/currentUser';\nimport Country from './Country';\nimport '../styles/Countries.scss';\n\nconst maxSelectedCountries = 10;\n\nconst Countries = ({\n  currentUser,\n  countryList,\n  getCountries,\n  updateUserCountries,\n  updateGuestCountries,\n  setAlert,\n}) => {\n  //Load countryList\n  useEffect(() => {\n    if (!countryList.loaded) {\n      console.log('Getting countries');\n      getCountries();\n    }\n  }, [getCountries, countryList]);\n\n  //Get user selected Countries\n  useEffect(() => {\n    if (countryList.loaded && !currentUser.guest) {\n      console.log('Getting user countries');\n      setSelectedCountries(currentUser.countries);\n    } else if (countryList.loaded && currentUser.guest) {\n      let guestArray = ['united-kingdom'];\n      while (guestArray.length < 5) {\n        let rand = Math.floor(Math.random() * countryList.countries.length);\n        if (!guestArray.includes(countryList.countries[rand].slug)) {\n          guestArray.push(countryList.countries[rand].slug);\n        }\n      }\n      setSelectedCountries(guestArray.sort());\n    }\n  }, [countryList.loaded]);\n\n  //State to hold selected countries\n  const [selectedCountries, setSelectedCountries] = useState(\n    currentUser.countries\n  );\n\n  //Get user selected Countries\n  useEffect(() => {\n    if (!currentUser.guest) {\n      updateUserCountries(selectedCountries);\n    } else {\n      updateGuestCountries(selectedCountries);\n    }\n  }, [selectedCountries]);\n\n  let listFull = false;\n\n  if (selectedCountries.length >= maxSelectedCountries) {\n    listFull = true;\n  } else {\n    listFull = false;\n  }\n\n  const toggleCountry = (countrySlug) => {\n    // Remove if already in list\n    if (selectedCountries.includes(countrySlug)) {\n      setSelectedCountries(\n        selectedCountries.filter((country) => country !== countrySlug)\n      );\n    } else if (!listFull) {\n      setSelectedCountries([...selectedCountries, countrySlug]);\n    } else {\n      setAlert(\n        `Maximum countries reached. ${selectedCountries.length}/10`,\n        'warning'\n      );\n    }\n  };\n\n  let countrySelectedList = undefined;\n  let countryCompleteList = undefined;\n\n  if (countryList.countries.length > 0) {\n    countrySelectedList = countryList.countries\n      .filter((country) => selectedCountries.includes(country.slug))\n      .map((country) => {\n        return (\n          <div\n            key={country._id}\n            className='countryContainer'\n            onClick={() => toggleCountry(country.slug)}\n          >\n            <Country\n              country={country}\n              selectedCountries={selectedCountries}\n              listFull={listFull}\n            />\n          </div>\n        );\n      });\n    countryCompleteList = countryList.countries.map((country) => {\n      return (\n        <div\n          key={country._id}\n          className='countryContainer'\n          onClick={() => toggleCountry(country.slug)}\n        >\n          <Country\n            country={country}\n            selectedCountries={selectedCountries}\n            listFull={listFull}\n          />\n        </div>\n      );\n    });\n  }\n\n  return (\n    <Fragment>\n      {countrySelectedList ? (\n        <Fragment>\n          <div className='top'>\n            <div className='subheader'>\n              <h2>Selected {selectedCountries.length} (max 10)</h2>\n              {selectedCountries.length === 0 && (\n                <div className='instruction'>\n                  Select up to 10 countries from the list below\n                </div>\n              )}\n            </div>\n\n            <div className='CountryList'>{countrySelectedList}</div>\n          </div>\n\n          <div className='subheader'>\n            <h2>All Countries ({countryCompleteList.length})</h2>\n          </div>\n          <div className='bottom'>\n            <div className='CountryList'>{countryCompleteList}</div>\n          </div>\n        </Fragment>\n      ) : (\n        <div className='header'>\n          <h1>Loading countries...</h1>\n        </div>\n      )}\n    </Fragment>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  countryList: state.countryList,\n  currentUser: state.currentUser,\n});\n\nexport default connect(mapStateToProps, {\n  setAlert,\n  getCountries,\n  updateUserCountries,\n  updateGuestCountries,\n})(Countries);\n","import dayjs from 'dayjs';\n\nexport const countryNameFromSlug = (countrySlug, countries) => {\n  return countries.find((country) => country.slug === countrySlug).country;\n};\n\nexport const formatDate = (date) => {\n  return dayjs(date).format('DD.MMM.YYYY');\n};\n\nexport const populationFromSlug = (countrySlug, countries) => {\n  return countries.find((country) => country.slug === countrySlug).population;\n};\n\nexport const populationString = (countrySlug, countries) => {\n  let population = populationFromSlug(countrySlug, countries);\n  return `(${abbreviateNumber(population)})`;\n};\n\nexport const abbreviateNumber = (value) => {\n  var newValue = value;\n  if (value >= 1000) {\n    var suffixes = ['', 'k', 'm', 'b', 't'];\n    var suffixNum = Math.floor(('' + value).length / 3);\n    var shortValue = '';\n    for (var precision = 2; precision >= 1; precision--) {\n      shortValue = parseFloat(\n        (suffixNum !== 0\n          ? value / Math.pow(1000, suffixNum)\n          : value\n        ).toPrecision(precision)\n      );\n      var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n      if (dotLessShortValue.length <= 2) {\n        break;\n      }\n    }\n    if (shortValue % 1 !== 0) shortValue = shortValue.toFixed(1);\n    newValue = shortValue + suffixes[suffixNum];\n  }\n  return newValue;\n};\n\nexport const per100k = (countrySlug, dataArray, countries) => {\n  let population = populationFromSlug(countrySlug, countries);\n  return dataArray.map((entry) => ((entry / population) * 100000).toFixed(1));\n};\n\nexport const percentage = (countrySlug, dataArray, countries) => {\n  let population = populationFromSlug(countrySlug, countries);\n  return dataArray.map((entry) => ((entry / population) * 100).toFixed(6));\n};\n\nexport const cumulativeToDifference = (cumulativeArray) => {\n  let differenceArray = [];\n  differenceArray.push(cumulativeArray[0]);\n  for (let i = 1; i < cumulativeArray.length; i++) {\n    let difference = cumulativeArray[i] - cumulativeArray[i - 1];\n    if (difference < 0) {\n      difference = 0;\n    }\n    differenceArray.push(difference);\n  }\n  return differenceArray;\n};\n\nexport const cumulativeErrorFix = (originalArray) => {\n  let reversedArray = [...originalArray].reverse();\n  let fixedArray = [];\n  fixedArray.push(reversedArray[0]);\n  for (let i = 1; i < reversedArray.length; i++) {\n    if (reversedArray[i] > fixedArray[i - 1]) {\n      fixedArray.push(fixedArray[i - 1]);\n    } else {\n      fixedArray.push(reversedArray[i]);\n    }\n  }\n  fixedArray.reverse();\n  return fixedArray;\n};\n\n/**\n * returns an array with moving average of the input array\n * @param array - the input array\n * @param count - the number of elements to include in the moving average calculation\n * @param qualifier - an optional function that will be called on each\n *  value to determine whether it should be used\n * eg function(val){ return val != 0; }\n */\nexport const movingAverage = (array, count, qualifier) => {\n  // calculate average for subarray\n  let avg = function (array, qualifier) {\n    let sum = 0,\n      count = 0,\n      val;\n    for (let i in array) {\n      val = array[i];\n      if (!qualifier || qualifier(val)) {\n        sum += val;\n        count++;\n      }\n    }\n\n    return sum / count;\n  };\n\n  let result = [],\n    val;\n\n  // pad beginning of result with null values\n  for (let i = 0; i < count - 1; i++) result.push(null);\n\n  // calculate average for each subarray and add to result\n  for (let j = 0, len = array.length - count; j <= len; j++) {\n    val = avg(array.slice(j, j + count), qualifier);\n    if (isNaN(val)) result.push(null);\n    else result.push(val);\n  }\n\n  return result;\n};\n","import {\n  countryNameFromSlug,\n  formatDate,\n  cumulativeToDifference,\n  cumulativeErrorFix,\n  per100k,\n  populationString,\n} from '../../utils/helpers';\n\nconst fields = {\n  slug: ['confirmed', 'deaths'],\n};\n\nconst colorOpacity = 1;\n\nconst randomColor = [\n  `rgba(255,0,0,${colorOpacity})`,\n  `rgba(0,255,0,${colorOpacity})`,\n  `rgba(0,0,175,${colorOpacity})`,\n  `rgba(255,195,0,${colorOpacity})`,\n  `rgba(144,0,255,${colorOpacity})`,\n  `rgba(0,114,255,${colorOpacity})`,\n  `rgba(255,125,0,${colorOpacity})`,\n  `rgba(50,150,00,${colorOpacity})`,\n  `rgba(225,0,225,${colorOpacity})`,\n  `rgba(0,255,255,${colorOpacity})`,\n];\n\nexport const calculateChartData = ({\n  chartModeMeasure,\n  chartModeData,\n  chartModeScale,\n  countries,\n  selectedCountries,\n}) => {\n  let selectedData = [];\n\n  // set chart measure mode\n  switch (chartModeMeasure) {\n    case 0:\n      selectedData = selectedCountries.map((country) => ({\n        countrySlug: country.countrySlug,\n        data: cumulativeErrorFix(country.data[fields.slug[chartModeData]]),\n      }));\n      break;\n\n    case 1:\n      selectedData = selectedCountries.map((country) => ({\n        countrySlug: country.countrySlug,\n        data: cumulativeToDifference(\n          cumulativeErrorFix(country.data[fields.slug[chartModeData]])\n        ),\n      }));\n      break;\n\n    default:\n      selectedData = selectedCountries.map((country) => ({\n        countrySlug: country.countrySlug,\n        data: country.data[fields.slug[chartModeData]],\n      }));\n  }\n\n  // // set chart scale\n  switch (chartModeScale) {\n    case 1:\n      selectedData = selectedData.map((country) => ({\n        data: country.data,\n      }));\n      break;\n\n    case 0:\n      selectedData = selectedData.map((country) => ({\n        data: per100k(country.countrySlug, country.data, countries),\n      }));\n      break;\n\n    default:\n      selectedData = selectedData.map((country) => ({\n        data: country.data,\n      }));\n  }\n\n  let chartData = {\n    labels: selectedCountries[0].data.date.map((date) => formatDate(date)),\n    datasets: selectedCountries.map((country, index) => ({\n      label: `${countryNameFromSlug(\n        country.countrySlug,\n        countries\n      )} ${populationString(country.countrySlug, countries)}`,\n      data: selectedData[index].data,\n      backgroundColor: randomColor[index],\n      fill: false,\n      borderColor: randomColor[index],\n      borderWidth: 1,\n      pointRadius: 1,\n    })),\n  };\n\n  return chartData;\n};\n","import React, { useState, useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport { calculateChartData } from './calculateChartData';\nimport { Line } from 'react-chartjs-2';\nimport '../../styles/Chart.scss';\n\nconst LineChart = ({\n  chartModeData,\n  chartModeMeasure,\n  chartModeScale,\n  countries,\n  selectedCountries,\n}) => {\n  //Get user selected Countries\n  useEffect(() => {\n    setChartData(\n      calculateChartData({\n        chartModeData,\n        chartModeMeasure,\n        chartModeScale,\n        countries,\n        selectedCountries,\n      })\n    );\n  }, [\n    chartModeData,\n    chartModeMeasure,\n    chartModeScale,\n    countries,\n    selectedCountries,\n  ]);\n\n  const [chartData, setChartData] = useState(null);\n\n  const chartOptionsWide = {\n    legend: {\n      onHover: function (e) {\n        e.target.style.cursor = 'pointer';\n      },\n      display: true,\n      position: 'right',\n      labels: {\n        boxWidth: 20,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            minRotation: 90,\n            maxTicksLimit: 40,\n          },\n        },\n      ],\n    },\n    maintainAspectRatio: false,\n  };\n\n  const chartOptionsNormal = {\n    legend: {\n      onHover: function (e) {\n        e.target.style.cursor = 'pointer';\n      },\n      display: true,\n      position: 'bottom',\n      labels: {\n        boxWidth: 20,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            minRotation: 90,\n            maxTicksLimit: 20,\n          },\n        },\n      ],\n    },\n    maintainAspectRatio: false,\n  };\n\n  const chartOptionsNarrow = {\n    legend: {\n      display: true,\n      position: 'bottom',\n      labels: {\n        boxWidth: 20,\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          ticks: {\n            minRotation: 90,\n            maxTicksLimit: 10,\n          },\n        },\n      ],\n    },\n    maintainAspectRatio: false,\n  };\n\n  return (\n    <div className='LineChart'>\n      {chartData !== null && (\n        <Fragment>\n          <div className='chartWide'>\n            <Line redraw data={chartData} options={chartOptionsWide} />\n          </div>\n          <div className='chartNormal'>\n            <Line redraw data={chartData} options={chartOptionsNormal} />\n          </div>\n          <div className='chartNarrow'>\n            <Line redraw data={chartData} options={chartOptionsNarrow} />\n          </div>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  countries: state.countryList.countries,\n  selectedCountries: state.stats.countries,\n  chartModeData: state.stats.chartModeData,\n  chartModeMeasure: state.stats.chartModeMeasure,\n  chartModeScale: state.stats.chartModeScale,\n});\n\nexport default connect(mapStateToProps, {})(LineChart);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { setMeasure, setData, setScale } from '../../actions/stats';\nimport '../../styles/Chart.scss';\n\nconst ModeButton = ({\n  mode,\n  value,\n  text,\n  position,\n  chartModeMeasure,\n  chartModeData,\n  chartModeScale,\n  setMeasure,\n  setData,\n  setScale,\n}) => {\n  const changeMode = () => {\n    switch (mode) {\n      case 0:\n        setData(value);\n        break;\n      case 1:\n        setMeasure(value);\n        break;\n      case 2:\n        setScale(value);\n        break;\n      default:\n        setData(value);\n    }\n  };\n\n  let isSelected = '';\n\n  switch (mode) {\n    case 0:\n      if (value === chartModeData) {\n        isSelected = 'selected';\n      }\n      break;\n    case 1:\n      if (value === chartModeMeasure) {\n        isSelected = 'selected';\n      }\n      break;\n    case 2:\n      if (value === chartModeScale) {\n        isSelected = 'selected';\n      }\n      break;\n    default:\n      isSelected = '';\n      return;\n  }\n\n  return (\n    <div\n      className={`ModeButton ${position} ${isSelected}`}\n      onClick={() => {\n        changeMode();\n      }}\n    >\n      {text}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  chartModeData: state.stats.chartModeData,\n  chartModeMeasure: state.stats.chartModeMeasure,\n  chartModeScale: state.stats.chartModeScale,\n});\n\nexport default connect(mapStateToProps, { setMeasure, setData, setScale })(\n  ModeButton\n);\n","import axios from 'axios';\nimport {\n  STATS_DELETE,\n  MULTI_STATS_LOADED,\n  STATS_FAILED,\n  SCALE_CHANGE,\n  MEASURE_CHANGE,\n  DATA_CHANGE,\n} from './types';\n\n//setMode\nexport const setMeasure = (value) => async (dispatch) => {\n  try {\n    dispatch({\n      type: MEASURE_CHANGE,\n      payload: value,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: STATS_FAILED,\n    });\n  }\n};\n\n//setData\nexport const setScale = (value) => async (dispatch) => {\n  try {\n    dispatch({\n      type: SCALE_CHANGE,\n      payload: value,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: STATS_FAILED,\n    });\n  }\n};\n\n//setField\nexport const setData = (value) => async (dispatch) => {\n  try {\n    dispatch({\n      type: DATA_CHANGE,\n      payload: value,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: STATS_FAILED,\n    });\n  }\n};\n\n//delete country stats\nexport const deleteCountryStats = () => async (dispatch) => {\n  try {\n    dispatch({\n      type: STATS_DELETE,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: STATS_FAILED,\n    });\n  }\n};\n\n//get all selected country stats\nexport const getStats = ({ userCountries }) => async (dispatch) => {\n  const getCountryStats = async (country) => {\n    const res = await axios.get(`/covidapi/stats/${country}`);\n    return res.data;\n  };\n\n  try {\n    let responses = await Promise.all(\n      userCountries.map((country) => getCountryStats(country))\n    );\n\n    responses.sort(function (a, b) {\n      if (a.countrySlug < b.countrySlug) {\n        return -1;\n      }\n      if (a.countrySlug > b.countrySlug) {\n        return 1;\n      }\n      // names must be equal\n      return 0;\n    });\n\n    let notAvailable = responses\n      .filter((country) => country.dataAvailable === false)\n      .map((country) => country.countrySlug);\n\n    let countriesStats = responses.filter(\n      (country) => country.dataAvailable === true\n    );\n\n    let payloadObject = {\n      notAvailable: notAvailable,\n      countriesStats: countriesStats,\n    };\n\n    dispatch({\n      type: MULTI_STATS_LOADED,\n      payload: payloadObject,\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: STATS_FAILED,\n    });\n  }\n};\n","import React, { Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport LineChart from './LineChart';\nimport { formatDate, countryNameFromSlug } from '../../utils/helpers';\nimport ModeButton from './ModeButton';\nimport '../../styles/Chart.scss';\n\nconst Chart = ({\n  chartModeData,\n  chartModeMeasure,\n  chartModeScale,\n  selectedCountries,\n  stats,\n  countryList,\n}) => {\n  const modeScale = ['per\\u00A0100k', 'total'];\n  const modeMeasure = ['Cumulative', 'Daily'];\n  const modeData = {\n    slug: ['confirmed', 'deaths'],\n    title: ['Confirmed\\u00A0Covid-19\\u00A0Cases', 'Covid-19\\u00A0Deaths'],\n  };\n\n  let chartTitle = 'Title';\n  let chartFrom = 'from';\n  let chartTo = 'to';\n\n  let notAvailableList = null;\n  if (selectedCountries.length > 0) {\n    chartTitle = `${modeData.title[chartModeData]} (${modeMeasure[chartModeMeasure]}\\u00A0${modeScale[chartModeScale]})`;\n    chartFrom = formatDate(selectedCountries[0].from);\n    chartTo = formatDate(selectedCountries[0].to);\n  }\n\n  if (stats.loaded && stats.notAvailable.length > 0) {\n    let list = stats.notAvailable\n      .map((country) => countryNameFromSlug(country, countryList.countries))\n      .toString()\n      .replaceAll(',', ', ');\n    notAvailableList = <div>No data currently available for: {list}</div>;\n  }\n  return (\n    <div className='Chart'>\n      {selectedCountries.length === 0 && (\n        <div className='title'>\n          <h1>Select countries to see Covid-19 data</h1>\n          {notAvailableList && <div>{notAvailableList}</div>}\n        </div>\n      )}\n      {selectedCountries.length > 0 && (\n        <Fragment>\n          <div className='title'>\n            <h1>{chartTitle}</h1>\n            {chartFrom} - {chartTo}\n          </div>\n          <div className='controls'>\n            <div className='modeButtons'>\n              {/* Data mode */}\n              <ModeButton text={'cases'} position='first' mode={0} value={0} />\n              <ModeButton text={'deaths'} position='last' mode={0} value={1} />\n            </div>\n            {/* Measure mode */}\n            {/* <div className='modeButtons'>\n              <ModeButton\n                text={'cumulative'}\n                position='first'\n                mode={1}\n                value={0}\n              />\n              <ModeButton text={'daily'} position='last' mode={1} value={1} />\n            </div> */}\n            <div className='modeButtons'>\n              {/* Scale mode */}\n              <ModeButton\n                text={'per 100k'}\n                position='first'\n                mode={2}\n                value={0}\n              />\n              <ModeButton text={'total'} position='last' mode={2} value={1} />\n            </div>\n          </div>\n\n          <LineChart />\n          {notAvailableList && <div className='note'>{notAvailableList}</div>}\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  stats: state.stats,\n  countryList: state.countryList,\n  selectedCountries: state.stats.countries,\n  chartModeData: state.stats.chartModeData,\n  chartModeMeasure: state.stats.chartModeMeasure,\n  chartModeScale: state.stats.chartModeScale,\n});\n\nexport default connect(mapStateToProps, {})(Chart);\n","import React, { useEffect } from 'react';\nimport Nav from './Nav/Nav';\nimport Countries from './Countries';\nimport { getCountries } from '../actions/countryList';\nimport { deleteCountryStats, getStats } from '../actions/stats';\nimport { connect } from 'react-redux';\nimport Chart from './Charts/Chart';\nimport '../styles/Stats.scss';\n\nconst Main = ({\n  countryList,\n  stats,\n  getCountries,\n  deleteCountryStats,\n  getStats,\n  currentUser,\n}) => {\n  let userCountries = currentUser.countries;\n\n  let loading =\n    'Loading ' + currentUser.countries.length + ' country statistics...';\n\n  //Load countryList\n  useEffect(() => {\n    deleteCountryStats();\n    return () => {\n      deleteCountryStats();\n    };\n  }, [deleteCountryStats]);\n\n  //Load countryList\n  useEffect(() => {\n    if (!countryList.loaded) {\n      console.log('Getting countries');\n      getCountries();\n    }\n  }, [getCountries, countryList]);\n\n  //Load stats for usercountries\n  useEffect(() => {\n    if (countryList.loaded) {\n      getStats({ userCountries });\n    }\n  }, [countryList, userCountries, getStats]);\n\n  return (\n    <div>\n      <Nav />\n      <div className='MainWrapper'>\n        <div className='CountriesWrapper'>\n          <Countries />\n        </div>\n\n        <div className='ChartWrapper'>\n          {stats.loaded ? (\n            <Chart />\n          ) : (\n            <div className='Chart'>\n              <div className='title'>\n                <h1>{loading}</h1>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  stats: state.stats,\n  currentUser: state.currentUser,\n  countryList: state.countryList,\n});\n\nexport default connect(mapStateToProps, {\n  getCountries,\n  deleteCountryStats,\n  getStats,\n})(Main);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n// import { default as IconClose } from '@material-ui/icons/Close';\nimport { closeAlert } from '../actions/alerts';\nimport '../styles/Alert.scss';\n\nconst Alert = ({ alerts, closeAlert }) =>\n  alerts !== null &&\n  alerts.length > 0 &&\n  alerts.map((alert) => (\n    <div key={alert.id} className='alertWrapper'>\n      <div\n        className={`alert ${alert.color}`}\n        onClick={() => closeAlert(alert.id)}\n      >\n        <div>{alert.message}</div>\n        {/* <div className='close'>\n          <IconClose />\n        </div> */}\n      </div>\n    </div>\n  ));\n\nAlert.propTypes = {\n  alerts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  alerts: state.alerts,\n});\n\nexport default connect(mapStateToProps, { closeAlert })(Alert);\n","import { SET_ALERT, REMOVE_ALERT } from '../actions/types';\n\nconst initialState = [];\n\nconst alerts = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case SET_ALERT:\n      return [...state, payload];\n    case REMOVE_ALERT:\n      return state.filter((alert) => alert.id !== payload);\n    default:\n      return state;\n  }\n};\n\nexport default alerts;\n","import { AUTHORIZED, UNAUTHORIZED } from '../actions/types';\n\nconst initialState = {\n  // token: localStorage.getItem('token'),\n  token: null,\n  isAuthenticated: null,\n  loaded: false,\n};\n\nconst auth = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case AUTHORIZED:\n      localStorage.setItem('token', payload.token);\n      return {\n        ...state,\n        token: payload.token,\n        isAuthenticated: true,\n        loaded: true,\n      };\n    case UNAUTHORIZED:\n      localStorage.removeItem('token');\n      return {\n        ...state,\n        token: null,\n        isAuthenticated: false,\n        loaded: false,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default auth;\n","import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  USER_LOADED,\n  AUTH_ERROR,\n  LOGOUT,\n  COUNTRIES_UPDATE,\n  GUEST_COUNTRIES_UPDATE,\n  LOGIN_GUEST,\n} from '../actions/types';\n\nconst initialState = {\n  guest: false,\n  loaded: false,\n  countries: [],\n  _id: undefined,\n  name: undefined,\n  date: undefined,\n  __v: undefined,\n};\n\nconst currentUser = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case LOGIN_GUEST:\n      return {\n        ...state,\n        guest: true,\n        loaded: true,\n      };\n    case USER_LOADED:\n      return {\n        ...state,\n        ...payload,\n        loaded: true,\n      };\n    case REGISTER_SUCCESS:\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        guest: false,\n        loaded: true,\n      };\n    case COUNTRIES_UPDATE:\n      return {\n        ...state,\n        countries: payload,\n      };\n    case GUEST_COUNTRIES_UPDATE:\n      return {\n        ...state,\n        countries: payload,\n      };\n    case REGISTER_FAIL:\n    case AUTH_ERROR:\n    case LOGIN_FAIL:\n    case LOGOUT:\n      return {\n        ...state,\n        loaded: false,\n        guest: false,\n        countries: [],\n        _id: undefined,\n        name: undefined,\n        date: undefined,\n        __v: undefined,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentUser;\n","import { COUNTRIES_LOADED, COUNTRIES_FAILED } from '../actions/types';\n\nconst initialState = {\n  countries: [],\n  loaded: false,\n};\n\nconst countryList = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case COUNTRIES_LOADED:\n      return {\n        ...state,\n        countries: payload,\n        loaded: true,\n      };\n    case COUNTRIES_FAILED:\n      return {\n        ...state,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default countryList;\n","import {\n  STATS_DELETE,\n  MULTI_STATS_LOADED,\n  STATS_LOAD,\n  STATS_FAILED,\n  SCALE_CHANGE,\n  MEASURE_CHANGE,\n  DATA_CHANGE,\n} from '../actions/types';\n\nconst initialState = {\n  loaded: false,\n  countries: [],\n  notAvailable: [],\n  chartModeMeasure: 0,\n  chartModeData: 0,\n  chartModeScale: 0,\n};\n\nconst stats = (state = initialState, action) => {\n  const { type, payload } = action;\n\n  switch (type) {\n    case MEASURE_CHANGE:\n      return {\n        ...state,\n        chartModeMeasure: payload,\n      };\n    case SCALE_CHANGE:\n      return {\n        ...state,\n        chartModeScale: payload,\n      };\n    case DATA_CHANGE:\n      return {\n        ...state,\n        chartModeData: payload,\n      };\n    case STATS_DELETE:\n      return {\n        ...state,\n        countries: [],\n        notAvailable: [],\n        loaded: false,\n      };\n    case MULTI_STATS_LOADED:\n      return {\n        ...state,\n        notAvailable: payload.notAvailable,\n        countries: payload.countriesStats,\n        loaded: true,\n      };\n    case STATS_LOAD:\n      return {\n        ...state,\n        countries: [...state.countries, payload],\n        loaded: true,\n      };\n    case STATS_FAILED:\n      return {\n        ...state,\n        loaded: false,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default stats;\n","import { combineReducers } from 'redux';\nimport alerts from './alerts';\nimport auth from './auth';\nimport currentUser from './currentUser';\nimport countryList from './countryList';\nimport stats from './stats';\n\nexport default combineReducers({\n  alerts,\n  auth,\n  countryList,\n  currentUser,\n  stats,\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\n\nconst initialState = {};\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React, { useEffect } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Home from './Components/Home';\nimport Login from './Components/Login';\nimport Register from './Components/Register';\nimport Main from './Components/Main';\nimport './styles/App.scss';\nimport Alert from './Components/Alert';\nimport { loadUser } from './actions/currentUser';\nimport setAuthToken from './utils/setAuthToken';\n\n// Redux\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nif (localStorage.token) {\n  setAuthToken(localStorage.token);\n}\n\nconst App = () => {\n  useEffect(() => {\n    store.dispatch(loadUser());\n  }, []);\n\n  return (\n    <Provider store={store}>\n      <div className='App'>\n        <Switch>\n          <Route exact path='/' component={Home} />\n          <Route exact path='/main' component={Main} />\n          <Route exact path='/login' component={Login} />\n          <Route exact path='/register' component={Register} />\n        </Switch>\n        <Alert />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter basename='/covid19'>\n    {/* <BrowserRouter> */}\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}